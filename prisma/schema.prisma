generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum BusinessStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserAddressType {
  HOME
  OFFICE
}

enum VoucherType {
  SALE_OFF
  GIFT
}

enum VoucherUsage {
  ONE_TIME
  UNTIL_EXPIRATION
}

enum VoucherStatus {
  AVAILABLE
  SOLD_OUT
  EXPIRED
  DELETED
}

enum ProductStatus {
  AVAILABLE
  SOLD_OUT
  DELETED
}

model User {
  id String @id @default(uuid())
  is_admin Boolean @default(false)
  password String
  name String?
  avatar_image_url String?
  status UserStatus @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  email UserEmail?
  phone_number UserPhoneNumber?
  addresses UserAddress[]
  business_managers BusinessManager[]
  business_customers BusinessCustomer[]
  business_followers BusinessFollower[]
  business_ratings BusinessRating[]
  voucher_customers VoucherCustomer[]
  post_comments PostComment[]
  post_favorites PostFavorite[]
  post_saves PostSave[]
}

model UserEmail {
  id String @id
  user_id String @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserPhoneNumber {
  id String @id
  user_id String @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserAddress {
  id String @id @default(uuid())
  user_id String 
  name String
  type UserAddressType
  lng Float
  lat Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Business {
  id String @id @default(uuid())
  category_id String?
  name String?
  description String?
  avatar_image_url String?
  email String?
  phone_number String?
  website String?
  address_id String? @unique
  timetable_id String? @unique
  lowest_price Int?
  highest_price Int?
  follow_count Int @default(0)
  rating Float @default(0)
  status BusinessStatus @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  category BusinessCategory? @relation(fields: [category_id], references: [id])
  address BusinessAddress? @relation(fields: [address_id], references: [id])
  timetable BusinessTimetable? @relation(fields: [timetable_id], references: [id])
  managers BusinessManager[]
  customers BusinessCustomer[]
  products Product[]
  vouchers Voucher[]
  followers BusinessFollower[]
  ratings BusinessRating[]
  posts Post[]
}

model BusinessCategory {
  id String @id @default(uuid())
  name String

  business Business[]
}

model BusinessAddress {
  id String @id @default(uuid())
  name String?
  lng Float?
  lat Float?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  business Business?
}

model BusinessTimetable {
  id String @id @default(uuid())
  mon_opens_at DateTime? @db.Time()
  mon_closes_at DateTime? @db.Time()
  tue_opens_at DateTime? @db.Time()
  tue_closes_at DateTime? @db.Time()
  wed_opens_at DateTime? @db.Time()
  wed_closes_at DateTime? @db.Time()
  thu_opens_at DateTime? @db.Time()
  thu_closes_at DateTime? @db.Time()
  fri_opens_at DateTime? @db.Time()
  fri_closes_at DateTime? @db.Time()
  sat_opens_at DateTime? @db.Time()
  sat_closes_at DateTime? @db.Time()
  sun_opens_at DateTime? @db.Time()
  sun_closes_at DateTime? @db.Time()
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  business Business?
}

model BusinessManager {
  user_id String
  business_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model BusinessCustomer {
  business_id String
  user_id String
  take_voucher_count Int
  use_voucher_count Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id])
}

model BusinessFollower {
  business_id String
  user_id String
  created_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id])
}

model BusinessRating {
  business_id String
  user_id String
  content String
  value Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id])
}

model Product {
  id String @id @default(uuid())
  business_id String
  name String
  image_url String
  description String
  price Int
  status ProductStatus @default(AVAILABLE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  voucher Voucher[]
}

model Voucher {
  id String @id @default(uuid())
  business_id String
  name String
  type VoucherType
  image_url String
  description String
  percent Int?
  value Int?
  max_value Int?
  fixed_price Int?
  condition_min_bill_value Int?
  condition_min_bill_item_count Int?
  condition_product_id String?
  condition_beginning_hour Int?
  condition_ending_hour Int?
  usage VoucherUsage
  status VoucherStatus
  apply_date DateTime
  expiration_date DateTime
  count Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  product Product? @relation(fields: [condition_product_id], references: [id])
  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  voucher_customers VoucherCustomer[]
  post_vouchers PostVoucher[]
}

model VoucherCustomer {
  voucher_id String
  user_id String
  use_count Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([voucher_id, user_id])
  voucher Voucher @relation(fields: [voucher_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}

model Post {
  id String @id @default(uuid())
  business_id String
  content String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  vouchers PostVoucher[]
  comments PostComment[]
  favorites PostFavorite[]
  saves PostSave[]
}

model PostVoucher {
  post_id String
  voucher_id String
  index Int

  @@id([post_id, voucher_id])
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  voucher Voucher @relation(fields: [voucher_id], references: [id])
}

model PostComment {
  id String @id @default(uuid())
  post_id String?
  user_id String
  content String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  post Post? @relation(fields: [post_id], references: [id], onDelete: SetNull)
  user User @relation(fields: [user_id], references: [id])
}

model PostFavorite {
  post_id String
  user_id String
  created_at DateTime @default(now())

  @@id([post_id, user_id])
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id])
}

model PostSave {
  post_id String
  user_id String
  created_at DateTime @default(now())

  @@id([post_id, user_id])
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id])
}