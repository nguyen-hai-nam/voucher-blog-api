generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum BusinessStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum UserAddressType {
  HOME
  OFFICE
  OTHER
}

enum VoucherUsage {
  ONE_TIME
  UNTIL_EXPIRATION
}

enum VoucherTarget {
  ALL
  SILVER
  GOLD
  DIAMOND
}

enum VoucherStatus {
  AVAILABLE
  SOLD_OUT
  EXPIRED
  DELETED
}

enum ProductStatus {
  AVAILABLE
  SOLD_OUT
  DELETED
}

model User {
  id String @id @default(uuid())
  is_admin Boolean @default(false)
  password String
  email String @unique
  phone_number String? @unique
  name String?
  avatar_image_url String?
  national_id_front_image_url String?
  national_id_back_image_url String?
  status UserStatus @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  addresses UserAddress[]
  business_managers BusinessManager[]
  business_customers BusinessCustomer[]
  business_followers BusinessFollower[]
  business_ratings UserRateBusiness[]
  collectedVouchers UserCollectVoucher[]
  usedVouchers UserUseVoucher[]
  comments UserCommentCampaign[]
  lovedCampaign UserLoveCampaign[]
  savedCampaign UserSaveCampaign[]
}

model UserAddress {
  id String @id @default(uuid())
  user_id String 
  name String
  type UserAddressType
  lng Float
  lat Float
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Category {
  id String @id @default(uuid())
  name String
  business Business[]
}

model Business {
  id String @id @default(uuid())
  category_id String?
  name String?
  description String?
  tax_code String?
  avatar_image_url String?
  email String?
  phone_number String?
  website String?
  address_name String?
  lng Float
  lat Float
  open_hour String? // hh:mm
  close_hour String? // hh:mm
  lowest_price Int?
  highest_price Int?
  follow_count Int @default(0)
  rating Float @default(0)
  status BusinessStatus @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  category Category? @relation(fields: [category_id], references: [id])
  productCategories ProductCategory[]
  managers BusinessManager[]
  customers BusinessCustomer[]
  products Product[]
  followers BusinessFollower[]
  ratings UserRateBusiness[]
  campaigns Campaign[]
  images BusinessImage[]
}

enum ImageType {
  FRONT
  INSIDE
  MENU
  LICENSE
}

model BusinessImage {
  id String @id @default(uuid())
  type ImageType
  url String
  business_id String
  created_at DateTime @default(now())

  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model BusinessManager {
  user_id String
  business_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
}

model BusinessCustomer {
  business_id String
  user_id String
  take_voucher_count Int
  use_voucher_count Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id])
}

model BusinessFollower {
  business_id String
  user_id String
  created_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id])
}

model UserRateBusiness {
  business_id String
  user_id String
  content String
  value Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([business_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  business Business @relation(fields: [business_id], references: [id])
}

model Product {
  id String @id @default(uuid())
  business_id String
  category_id String
  name String
  description String
  price Int
  status ProductStatus @default(AVAILABLE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  category ProductCategory @relation(fields: [category_id], references: [id], onDelete: Cascade)
  images ProductImage[]
  applyingVouchers VoucherApplyProduct[]
}

model ProductCategory {
  id String @id @default(uuid())
  business_id String
  name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  products Product[]
}

model ProductImage {
  id String @id @default(uuid())
  product_id String
  url String
  created_at DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

enum VoucherType {
  DISCOUNT
  GIFT
}

model Voucher {
  id String @id @default(uuid())
  campaign_id String
  type VoucherType
  media_url String
  description String
  discount_type String?
  percent Int?
  max_value Int?
  value Int?
  fixed_price Int?
  usage VoucherUsage @default(ONE_TIME)
  status VoucherStatus @default(AVAILABLE)
  collected_count Int @default(0)
  max_use Int @default(0)
  condition_min_bill_value Int?
  condition_beginning_hour Int?
  condition_ending_hour Int?
  condition_target VoucherTarget @default(ALL)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  appliedProducts VoucherApplyProduct[]
  campaign Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  collectedBy UserCollectVoucher[]
  usedBy UserUseVoucher[]
}

model VoucherApplyProduct {
  voucher_id String
  product_id String

  @@id([voucher_id, product_id])
  voucher Voucher @relation(fields: [voucher_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

model UserCollectVoucher {
  voucher_id String
  user_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@id([voucher_id, user_id])
  voucher Voucher @relation(fields: [voucher_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}

model UserUseVoucher {
  id String @id @default(uuid())
  voucher_id String
  user_id String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  voucher Voucher @relation(fields: [voucher_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}

enum CampaignStatus {
  ACTIVE
  EXPIRED
}

model Campaign {
  id String @id @default(uuid())
  business_id String
  name String
  description String
  start_date DateTime
  end_date DateTime
  love_count Int @default(0)
  save_count Int @default(0)
  status CampaignStatus @default(ACTIVE)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  business Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  vouchers Voucher[]
  comments UserCommentCampaign[]
  loves UserLoveCampaign[]
  saves UserSaveCampaign[]
}

model UserCommentCampaign {
  id String @id @default(uuid())
  post_id String
  user_id String
  content String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  campaign Campaign @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id])
}

model UserLoveCampaign {
  user_id String
  post_id String
  created_at DateTime @default(now())

  @@id([post_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  campaign Campaign @relation(fields: [post_id], references: [id], onDelete: Cascade)
}

model UserSaveCampaign {
  user_id String
  post_id String
  created_at DateTime @default(now())

  @@id([post_id, user_id])
  user User @relation(fields: [user_id], references: [id])
  campaign Campaign @relation(fields: [post_id], references: [id], onDelete: Cascade)
}